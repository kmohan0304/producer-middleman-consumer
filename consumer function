void* consumer_func(void* threadid)
{
int item,x;
//* while true *//
while(1)
{
x=((rand()%3)+1); //* generates a random number between 1 to 3 for sleeping*//
printf("consumer thread %d sleeping for %d seconds",pthread_self(),x);
sleep(x); //* consumer thread sleeps for a random amount of seconds after insertion *//
sem_wait(&full2);// *counting semaphore (here acts like wait()) for consumer  buffer *// 
pthread_mutex_lock(&buffer_mutex2); // *mutex lock around the critical section for consumer buffer *//
item=remove_item(consumer_buffer,out);//*call passed to remove item function to remove an element from consumer buffer*//
printf("consumer thread %d removed value %d\n",pthread_self(),item);
pthread_mutex_unlock(&buffer_mutex2);//*mutex lock around the critical section for consumer buffer unlocked *//
sem_post(&empty2); // *counting semaphore (here acts like signal()) *// 
}
return 0;
}
